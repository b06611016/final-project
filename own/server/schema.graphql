type Query {
    chats(sent: String!, receive: String!): [Chat!]!
}

type Mutation {
    createChat(request: String!, data: CreateChatInput!): Task!
    deleteChats(request: String!, sent: String!): Clear!
}

type Subscription{
    chat: ChatSubscriptionPayload!
    deletechats: deleteAllSubsciptionPayload!
}

input CreateChatInput {
   sent: String!
   receive: String!
   body: String!
}

type Task {
    task: String!
    payload: Chat!
}

type Clear{
    type: String!
    msg: String!
}

type Chat {
    sent: String!
    receive: String!
    body: String!
}

enum MutationType {
    CREATED
    DELETED
    CLEAR
}

type ChatSubscriptionPayload {
    mutation: MutationType!
    data: Chat!
}

type deleteAllSubsciptionPayload {
    mutation: MutationType!
    sent: String!
}